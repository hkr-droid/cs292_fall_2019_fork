(define-symbolic a b integer?)

(define global-senv
  (hash-set (hash-set (hash) 'A a) 'B b))

(define test-se
  (hash-set (hash-set (hash-set (hash) 0 (hash)) 1 (hash)) 'global global-senv))

(evaluate (list a b) (solve
                      (assert (let ([g (hash-ref (parrun (hash-set (hash-set (hash) 0 A0) 1 A1) test-se test-k) 'global)])
                                (and (= (hash-ref g 'A) 7)
                                     (= (hash-ref g 'B) 51))))))

#<state: (#(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止))))) #hash((0 . #hash()) (1 . #hash()) (global . #hash((A . a) (B . b)))) 0 ()>
-->
#<state: (a load #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止))))) #hash((0 . #hash()) (1 . #hash()) (global . #hash((A . a) (B . b)))) 0 (a)>
-->
#<state: (#(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止)) #hash((0 . #hash()) (1 . #hash()) (global . #hash((A . a) (B . b)))) 1 ()>
-->
#<state: (load #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止))))) #hash((0 . #hash()) (1 . #hash()) (global . #hash((A . a) (B . b)))) 0 (a a)>
-->
#<state: (#(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止))))) #hash((0 . #hash((a . a))) (1 . #hash()) (global . #hash((A . a) (B . b)))) 0 ()>
-->
#<state: (#(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))) #hash((0 . #hash((a . a))) (1 . #hash()) (global . #hash((A . a) (B . b)))) 1 ()>
-->
#<state: (a load #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))) #hash((0 . #hash((a . a))) (1 . #hash()) (global . #hash((A . a) (B . b)))) 1 (a)>
-->
#<state: (load #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))) #hash((0 . #hash((a . a))) (1 . #hash()) (global . #hash((A . a) (B . b)))) 1 (a a)>
-->
#<state: (#(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))) #hash((0 . #hash((a . a))) (1 . #hash((a . a))) (global . #hash((A . a) (B . b)))) 1 ()>
-->
#<state: (#(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))))) #hash((0 . #hash((a . a))) (1 . #hash((a . a))) (global . #hash((A . a) (B . b)))) 1 ()>
-->
#<state: (#(struct:add a 1) := #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))))) #hash((0 . #hash((a . a))) (1 . #hash((a . a))) (global . #hash((A . a) (B . b)))) 1 (a)>
-->
#<state: (a 1 + := #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))))) #hash((0 . #hash((a . a))) (1 . #hash((a . a))) (global . #hash((A . a) (B . b)))) 1 (a)>
-->
#<state: (1 + := #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))))) #hash((0 . #hash((a . a))) (1 . #hash((a . a))) (global . #hash((A . a) (B . b)))) 1 (a a)>
-->
#<state: (+ := #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))))) #hash((0 . #hash((a . a))) (1 . #hash((a . a))) (global . #hash((A . a) (B . b)))) 1 (1 a a)>
-->
#<state: (:= #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))))) #hash((0 . #hash((a . a))) (1 . #hash((a . a))) (global . #hash((A . a) (B . b)))) 1 ((+ 1 a) a)>
-->
#<state: (#(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))))) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)))) (global . #hash((A . a) (B . b)))) 1 ()>
-->
#<state: (#(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)))) (global . #hash((A . a) (B . b)))) 1 ()>
-->
#<state: (a store #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)))) (global . #hash((A . a) (B . b)))) 1 (A)>
-->
#<state: (store #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)))) (global . #hash((A . a) (B . b)))) 1 ((+ 1 a) A)>
-->
#<state: (#(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)))) (global . #hash((A . (+ 1 a)) (B . b)))) 1 ()>
-->
#<state: (#(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)))) (global . #hash((A . (+ 1 a)) (B . b)))) 1 ()>
-->
#<state: (b load #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)))) (global . #hash((A . (+ 1 a)) (B . b)))) 1 (b)>
-->
#<state: (load #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)))) (global . #hash((A . (+ 1 a)) (B . b)))) 1 (b b)>
-->
#<state: (#(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . b))) (global . #hash((A . (+ 1 a)) (B . b)))) 1 ()>
-->
#<state: (#(struct::= b #(struct:add b 1)) #(struct:store b B)) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . b))) (global . #hash((A . (+ 1 a)) (B . b)))) 1 ()>
-->
#<state: (#(struct:add b 1) := #(struct:store b B)) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . b))) (global . #hash((A . (+ 1 a)) (B . b)))) 1 (b)>
-->
#<state: (b 1 + := #(struct:store b B)) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . b))) (global . #hash((A . (+ 1 a)) (B . b)))) 1 (b)>
-->
#<state: (1 + := #(struct:store b B)) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . b))) (global . #hash((A . (+ 1 a)) (B . b)))) 1 (b b)>
-->
#<state: (+ := #(struct:store b B)) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . b))) (global . #hash((A . (+ 1 a)) (B . b)))) 1 (1 b b)>
-->
#<state: (:= #(struct:store b B)) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . b))) (global . #hash((A . (+ 1 a)) (B . b)))) 1 ((+ 1 b) b)>
-->
#<state: (#(struct:store b B)) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . b)))) 1 ()>
-->
#<state: (b store) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . b)))) 1 (B)>
-->
#<state: (store) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . b)))) 1 ((+ 1 b) B)>
-->
#<state: () #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 1 ()>
-->
#<state: () #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 1 ()>
-->
#<state: (#(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止)))) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ()>
-->
#<state: (#(struct:add a 1) := #(struct:: #(struct:store a A) #(struct:: #(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止)))) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 (a)>
-->
#<state: (a 1 + := #(struct:: #(struct:store a A) #(struct:: #(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止)))) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 (a)>
-->
#<state: (1 + := #(struct:: #(struct:store a A) #(struct:: #(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止)))) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 (a a)>
-->
removing 1
-->
#<state: (+ := #(struct:: #(struct:store a A) #(struct:: #(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止)))) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 (1 a a)>
-->
#<state: (:= #(struct:: #(struct:store a A) #(struct:: #(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止)))) #hash((0 . #hash((a . a))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ((+ 1 a) a)>
-->
#<state: (#(struct:: #(struct:store a A) #(struct:: #(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止)))) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ()>
-->
#<state: (#(struct:store a A) #(struct:: #(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止))) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ()>
-->
#<state: (a store #(struct:: #(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止))) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 (A)>
-->
#<state: (store #(struct:: #(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止))) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ((+ 1 a) A)>
-->
#<state: (#(struct:: #(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止))) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ()>
-->
#<state: (#(struct:atomic (#(struct:: #(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))))) #(struct:止)) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ()>
-->
#<state: (#(struct:load A a) #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ()>
-->
#<state: ((+ 1 a) load #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 (a)>
-->
#<state: (load #(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ((+ 1 a) a)>
-->
#<state: (#(struct:: #(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))))) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ()>
-->
#<state: (#(struct::= a #(struct:add a 1)) #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))))) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ()>
-->
#<state: (#(struct:add a 1) := #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))))) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 (a)>
-->
#<state: (a 1 + := #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))))) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 (a)>
-->
#<state: (1 + := #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))))) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ((+ 1 a) a)>
-->
#<state: (+ := #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))))) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 (1 (+ 1 a) a)>
-->
#<state: (:= #(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))))) #hash((0 . #hash((a . (+ 1 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ((+ 2 a) a)>
-->
#<state: (#(struct:: #(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))))) #hash((0 . #hash((a . (+ 2 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ()>
-->
#<state: (#(struct:store a A) #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))) #hash((0 . #hash((a . (+ 2 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ()>
-->
#<state: (a store #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))) #hash((0 . #hash((a . (+ 2 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 (A)>
-->
#<state: (store #(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))) #hash((0 . #hash((a . (+ 2 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 1 a)) (B . (+ 1 b))))) 0 ((+ 2 a) A)>
-->
#<state: (#(struct:: #(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B)))) #hash((0 . #hash((a . (+ 2 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 1 b))))) 0 ()>
-->
#<state: (#(struct:load B b) #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))) #hash((0 . #hash((a . (+ 2 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 1 b))))) 0 ()>
-->
#<state: ((+ 1 b) load #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))) #hash((0 . #hash((a . (+ 2 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 1 b))))) 0 (b)>
-->
#<state: (load #(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))) #hash((0 . #hash((a . (+ 2 a)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 1 b))))) 0 ((+ 1 b) b)>
-->
#<state: (#(struct:: #(struct::= b #(struct:add b 1)) #(struct:store b B))) #hash((0 . #hash((a . (+ 2 a)) (b . (+ 1 b)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 1 b))))) 0 ()>
-->
#<state: (#(struct::= b #(struct:add b 1)) #(struct:store b B)) #hash((0 . #hash((a . (+ 2 a)) (b . (+ 1 b)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 1 b))))) 0 ()>
-->
#<state: (#(struct:add b 1) := #(struct:store b B)) #hash((0 . #hash((a . (+ 2 a)) (b . (+ 1 b)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 1 b))))) 0 (b)>
-->
#<state: (b 1 + := #(struct:store b B)) #hash((0 . #hash((a . (+ 2 a)) (b . (+ 1 b)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 1 b))))) 0 (b)>
-->
#<state: (1 + := #(struct:store b B)) #hash((0 . #hash((a . (+ 2 a)) (b . (+ 1 b)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 1 b))))) 0 ((+ 1 b) b)>
-->
#<state: (+ := #(struct:store b B)) #hash((0 . #hash((a . (+ 2 a)) (b . (+ 1 b)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 1 b))))) 0 (1 (+ 1 b) b)>
-->
#<state: (:= #(struct:store b B)) #hash((0 . #hash((a . (+ 2 a)) (b . (+ 1 b)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 1 b))))) 0 ((+ 2 b) b)>
-->
#<state: (#(struct:store b B)) #hash((0 . #hash((a . (+ 2 a)) (b . (+ 2 b)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 1 b))))) 0 ()>
-->
#<state: (b store) #hash((0 . #hash((a . (+ 2 a)) (b . (+ 2 b)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 1 b))))) 0 (B)>
-->
#<state: (store) #hash((0 . #hash((a . (+ 2 a)) (b . (+ 2 b)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 1 b))))) 0 ((+ 2 b) B)>
-->
#<state: () #hash((0 . #hash((a . (+ 2 a)) (b . (+ 2 b)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 2 b))))) 0 ()>
-->
#<state: () #hash((0 . #hash((a . (+ 2 a)) (b . (+ 2 b)))) (1 . #hash((a . (+ 1 a)) (b . (+ 1 b)))) (global . #hash((A . (+ 2 a)) (B . (+ 2 b))))) 0 ()>
-->
removing 0
-->
done!